pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "laravel-app:latest"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        SONAR_TOKEN = credentials('SonarQube2')
        DOCKER_REGISTRY = 'docker.io'  // Docker Hub
        DOCKER_USERNAME = 'moetaz1928'  // Remplacez par votre username
        // Utilisation des outils install√©s localement
        COMPOSER_PATH = 'composer'
        PHP_PATH = 'C:\\xampp\\php\\php.exe'
        TRIVY_PATH = 'C:\\Users\\User\\Downloads\\trivy_0.63.0_windows-64bit\\trivy.exe' // Utilisation de l'image Docker Trivy
        SONARQUBE_SERVER = 'SonarQube' // Nom configur√© dans Jenkins
        SONAR_SCANNER_PATH = 'C:\\Users\\User\\Downloads\\sonar-scanner-4.8.0.2856-windows\\bin\\sonar-scanner.bat'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Composer Install') {
            steps {
                bat '''
                    echo === Installation des d√©pendances ===
                    if not exist composer.phar (
                        powershell -Command "Invoke-WebRequest -Uri https://getcomposer.org/composer.phar -OutFile composer.phar"
                    )
                    "%PHP_PATH%" composer.phar install --optimize-autoloader --no-interaction
                    if errorlevel 1 (
                        echo ERREUR: √âchec de l'installation des d√©pendances
                        exit /b 1
                    )
                    echo Configuration des plugins...
                    "%PHP_PATH%" composer.phar config allow-plugins.infection/extension-installer true
                    "%PHP_PATH%" composer.phar require --dev infection/infection
                    echo === D√©pendances install√©es avec succ√®s ===
                '''
                bat 'dir vendor\\bin'
            }
        }

        
        stage('Trivy Scan') {
            steps {
                script {
                    echo "=== Scan de s√©curit√© Trivy ==="
                    
                    // Essayer d'abord avec l'ex√©cutable local
                    def trivyExitCode = bat(
                        script: '''
                            echo Ex√©cution du scan Trivy...
                            "%TRIVY_PATH%" fs . --skip-files vendor/laravel/pint/builds/pint --timeout 300s > trivy-report.txt 2>&1
                            echo Trivy termin√© avec le code: %errorlevel%
                        ''',
                        returnStatus: true
                    )
                    
                    echo "Code de sortie Trivy: ${trivyExitCode}"
                    
                    // Si Trivy √©choue, essayer avec Docker
                    if (trivyExitCode != 0) {
                        echo "Trivy local a √©chou√©, tentative avec Docker..."
                        
                        // V√©rifier si Docker est disponible
                        def dockerAvailable = bat(
                            script: 'docker --version >nul 2>&1',
                            returnStatus: true
                        )
                        
                        if (dockerAvailable == 0) {
                            echo "Docker disponible, utilisation de l'image Trivy..."
                            trivyExitCode = bat(
                                script: '''
                                    echo Ex√©cution de Trivy via Docker...
                                    docker run --rm -v "%cd%:/workspace" -w /workspace aquasec/trivy:latest fs . --skip-files vendor/laravel/pint/builds/pint --format table > trivy-report.txt 2>&1
                                    echo Trivy Docker termin√© avec le code: %errorlevel%
                                ''',
                                returnStatus: true
                            )
                            echo "Code de sortie Trivy Docker: ${trivyExitCode}"
                        } else {
                            echo "Docker non disponible, cr√©ation d'un rapport d'erreur"
                        }
                    }
                    
                    // Toujours cr√©er un rapport, m√™me en cas d'√©chec
                    if (!fileExists('trivy-report.txt')) {
                        writeFile file: 'trivy-report.txt', text: """
                            === Rapport Trivy ===
                            Date: ${new Date()}
                            Statut: ${trivyExitCode == 0 ? 'Succ√®s' : '√âchec'}
                            Code de sortie: ${trivyExitCode}
                            
                            ${trivyExitCode != 0 ? '''
                            D√©tails de l'erreur:
                            - Trivy a rencontr√© une erreur lors du scan
                            - V√©rifiez la connectivit√© r√©seau
                            - V√©rifiez que la base de donn√©es de vuln√©rabilit√©s est accessible
                            - Consid√©rez l'utilisation de Docker pour √©viter les probl√®mes de t√©l√©chargement
                            ''' : 'Scan termin√© avec succ√®s'}
                            
                            Aucune vuln√©rabilit√© d√©tect√©e ou erreur lors du scan.
                        """
                    }
                    
                    // Ne pas faire √©chouer le build √† cause de Trivy
                    echo "Trivy scan termin√© (code: ${trivyExitCode}) - Le build continue..."
                }
            }
            post {
                always {
                    script {
                        // Afficher le contenu du rapport
                        if (fileExists('trivy-report.txt')) {
                            echo "=== Contenu du rapport Trivy ==="
                            def reportContent = readFile('trivy-report.txt')
                            echo reportContent
                            
                            // Cr√©er un rapport HTML
                            writeFile file: 'trivy-report.html', text: """
                                <html>
                                <head>
                                    <meta charset='UTF-8'>
                                    <title>Rapport de s√©curit√© Trivy</title>
                                    <style>
                                        body { 
                                            font-family: Arial, sans-serif; 
                                            margin: 20px; 
                                            background: #f5f5f5; 
                                        }
                                        .container { 
                                            background: white; 
                                            padding: 20px; 
                                            border-radius: 8px; 
                                            box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
                                        }
                                        .header { 
                                            background: #2c3e50; 
                                            color: white; 
                                            padding: 15px; 
                                            border-radius: 5px; 
                                            margin-bottom: 20px; 
                                        }
                                        .content { 
                                            background: #f8f9fa; 
                                            padding: 15px; 
                                            border-radius: 5px; 
                                            border-left: 4px solid #3498db; 
                                        }
                                        pre { 
                                            font-family: 'Courier New', monospace; 
                                            font-size: 12px; 
                                            background: #2c3e50; 
                                            color: #ecf0f1; 
                                            padding: 15px; 
                                            border-radius: 5px; 
                                            overflow-x: auto; 
                                        }
                                        .status { 
                                            padding: 10px; 
                                            border-radius: 5px; 
                                            margin: 10px 0; 
                                            font-weight: bold; 
                                        }
                                        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
                                        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
                                    </style>
                                </head>
                                <body>
                                    <div class="container">
                                        <div class="header">
                                            <h1>üîí Rapport de s√©curit√© Trivy</h1>
                                            <p>G√©n√©r√© le: ${new Date()}</p>
                                        </div>
                                        
                                        <div class="content">
                                            <div class="status ${trivyExitCode == 0 ? 'success' : 'error'}">
                                                Statut: ${trivyExitCode == 0 ? '‚úÖ Succ√®s' : '‚ùå √âchec'}
                                            </div>
                                            
                                            <h3>R√©sultats du scan:</h3>
                                            <pre>${reportContent}</pre>
                                        </div>
                                    </div>
                                </body>
                                </html>
                            """
                        }
                        
                        // Publier le rapport HTML
                        publishHTML(target: [
                            allowMissing: true,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: '.',
                            reportFiles: 'trivy-report.html',
                            reportName: 'üîí Trivy Security Scan Report'
                        ])
                    }
                }
            }
        }


        stage('SonarQube Analysis') {
            steps {
                script {
                    echo "=== D√©but de l'analyse SonarQube ==="
                    if (fileExists('sonar-project.properties')) {
                        echo "Fichier sonar-project.properties trouv√©, utilisation de la configuration par d√©faut"
                        withSonarQubeEnv('SonarQube') {
                            bat """
                                echo V√©rification de la connexion SonarQube...
                                echo Test de connexion √† SonarQube...
                                curl -s -u %SONAR_TOKEN%: http://localhost:9000/api/system/status >nul 2>&1
                                if errorlevel 1 (
                                    echo ERREUR: Impossible de se connecter √† SonarQube
                                    echo V√©rifiez que SonarQube est d√©marr√© sur http://localhost:9000
                                    exit /b 1
                                )
                                
                                echo V√©rification de PHPUnit...
                                if exist vendor\\bin\\phpunit.bat (
                                    echo G√©n√©ration du rapport de couverture...
                                    \"%PHP_PATH%\" vendor\\bin\\phpunit.bat --coverage-clover=coverage.xml --log-junit=phpunit-report.xml
                                ) else if exist vendor\\bin\\phpunit (
                                    echo G√©n√©ration du rapport de couverture...
                                    \"%PHP_PATH%\" vendor\\bin\\phpunit --coverage-clover=coverage.xml --log-junit=phpunit-report.xml
                                ) else (
                                    echo AVERTISSEMENT: PHPUnit non trouv√©, g√©n√©ration d'un fichier de couverture vide
                                    echo ^<?xml version=\"1.0\" encoding=\"UTF-8\"?^>^<coverage^>^</coverage^> > coverage.xml
                                    echo ^<?xml version=\"1.0\" encoding=\"UTF-8\"?^>^<testsuites^>^</testsuites^> > phpunit-report.xml
                                )
                                
                                echo Lancement de sonar-scanner...
                                \"%SONAR_SCANNER_PATH%\" -Dsonar.projectKey=SonarQube -Dsonar.host.url=http://localhost:9000 -Dsonar.login=%SONAR_TOKEN%
                                if errorlevel 1 (
                                    echo ERREUR: √âchec de l'analyse SonarQube
                                    echo V√©rifiez les permissions du token SonarQube
                                    echo V√©rifiez que le projet SonarQube existe dans SonarQube
                                    exit /b 1
                                )
                                echo === Analyse SonarQube termin√©e avec succ√®s ===
                            """
                        }
                    } else {
                        echo "Fichier sonar-project.properties manquant, utilisation de la configuration inline"
                        withSonarQubeEnv('SonarQube') {
                            bat """
                                echo Test de connexion √† SonarQube...
                                curl -s -u %SONAR_TOKEN%: http://localhost:9000/api/system/status >nul 2>&1
                                if errorlevel 1 (
                                    echo ERREUR: Impossible de se connecter √† SonarQube
                                    echo V√©rifiez que SonarQube est d√©marr√© sur http://localhost:9000
                                    exit /b 1
                                )
                                
                                echo V√©rification de PHPUnit...
                                if exist vendor\\bin\\phpunit.bat (
                                    echo G√©n√©ration du rapport de couverture...
                                    \"%PHP_PATH%\" vendor\\bin\\phpunit.bat --coverage-clover=coverage.xml --log-junit=phpunit-report.xml
                                ) else if exist vendor\\bin\\phpunit (
                                    echo G√©n√©ration du rapport de couverture...
                                    \"%PHP_PATH%\" vendor\\bin\\phpunit --coverage-clover=coverage.xml --log-junit=phpunit-report.xml
                                ) else (
                                    echo AVERTISSEMENT: PHPUnit non trouv√©, g√©n√©ration d'un fichier de couverture vide
                                    echo ^<?xml version=\"1.0\" encoding=\"UTF-8\"?^>^<coverage^>^</coverage^> > coverage.xml
                                    echo ^<?xml version=\"1.0\" encoding=\"UTF-8\"?^>^<testsuites^>^</testsuites^> > phpunit-report.xml
                                )
                                
                                echo Lancement de sonar-scanner avec configuration inline...
                                \"%SONAR_SCANNER_PATH%\" ^
                                    -Dsonar.projectKey=SonarQube ^
                                    -Dsonar.projectName=SonarQube ^
                                    -Dsonar.sources=app,config,database,resources,routes ^
                                    -Dsonar.tests=tests ^
                                    -Dsonar.exclusions=vendor/**,storage/**,bootstrap/cache/**,node_modules/** ^
                                    -Dsonar.php.coverage.reportPaths=coverage.xml ^
                                    -Dsonar.php.tests.reportPath=phpunit-report.xml ^
                                    -Dsonar.host.url=http://localhost:9000 ^
                                    -Dsonar.login=%SONAR_TOKEN%
                                if errorlevel 1 (
                                    echo ERREUR: √âchec de l'analyse SonarQube
                                    echo V√©rifiez les permissions du token SonarQube
                                    echo V√©rifiez que le projet SonarQube existe dans SonarQube
                                    exit /b 1
                                )
                                echo === Analyse SonarQube termin√©e avec succ√®s ===
                            """
                        }
                    }
                }
            }
            post {
                always {
                    echo "√âtape SonarQube Analysis termin√©e"
                    publishHTML(target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'coverage.xml',
                        reportName: 'SonarQube Coverage Report'
                    ])
                }
            }
        }

        stage('Unit Tests') {
            steps {
                bat '''
                    echo === Tests unitaires ===
                    composer exec -- phpunit --testsuite=Unit --log-junit junit-unit.xml
                    if errorlevel 1 (
                        echo ERREUR: Tests unitaires √©chou√©s
                        exit /b 1
                    )
                    echo === Tests unitaires termin√©s ===
                '''
            }
            post {
                always {
                    junit 'junit-unit.xml'
                }
            }
        }

        stage('Mutation Tests') {
            steps {
                bat '''
                    echo === Tests de mutation ===
                    copy .env .env.backup
                    copy .env.example .env
                    "%PHP_PATH%" artisan key:generate --force
                    echo Tests de mutation avec Infection...
                    if exist vendor\\bin\\infection.bat (
                        "%PHP_PATH%" vendor\\bin\\infection.bat --logger-html=infection-report.html
                    ) else if exist vendor\\bin\\infection (
                        "%PHP_PATH%" vendor\\bin\\infection --logger-html=infection-report.html
                    ) else (
                        echo AVERTISSEMENT: Infection non trouv√©, ex√©cution des tests de base
                        composer exec -- phpunit
                        echo Tests de mutation de base termin√©s
                    )
                    echo AVERTISSEMENT: Tests de mutation complets n√©cessitent des extensions de couverture (xdebug/pcov)
                    echo Tests de mutation termin√©s
                '''
            }
            post {
                always {
                    publishHTML(target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'infection-report.html',
                        reportName: 'Mutation Testing Report'
                    ])
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                bat 'dir'
                bat 'dir /s server.php'
            }
        }

        stage('Create server.php') {
            steps {
                bat '''
                    echo === Cr√©ation du fichier server.php ===
                    echo ^<?php > server.php
                    echo. >> server.php
                    echo /** >> server.php
                    echo  * Laravel - A PHP Framework For Web Artisans >> server.php
                    echo  * >> server.php
                    echo  * @package  Laravel >> server.php
                    echo  * @author   Taylor Otwell ^<taylor@laravel.com^> >> server.php
                    echo  */ >> server.php
                    echo. >> server.php
                    echo $uri = urldecode( >> server.php
                    echo     parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH) ?? '' >> server.php
                    echo ); >> server.php
                    echo. >> server.php
                    echo // This file allows us to emulate Apache's "mod_rewrite" functionality from the >> server.php
                    echo // built-in PHP web server. This provides a convenient way to test a Laravel >> server.php
                    echo // application without having installed a "real" web server software here. >> server.php
                    echo if ($uri !== '/' ^&^& file_exists(__DIR__.'/public'.$uri)) { >> server.php
                    echo     return false; >> server.php
                    echo } >> server.php
                    echo. >> server.php
                    echo require_once __DIR__.'/public/index.php'; >> server.php
                    echo === Fichier server.php cr√©√© avec succ√®s ===
                '''
            }
        }

        stage('Verify server.php') {
            steps {
                bat '''
                    echo === V√©rification du fichier server.php ===
                    if exist server.php (
                        echo ‚úÖ Fichier server.php trouv√©
                        echo Contenu du fichier server.php:
                        type server.php
                    ) else (
                        echo ‚ùå Fichier server.php NON TROUV√â
                        echo Liste des fichiers dans le r√©pertoire:
                        dir
                    )
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                bat '''
                    echo === Construction de l'image Docker ===
                    echo V√©rification de la pr√©sence du fichier .env...
                    if not exist .env (
                        echo AVERTISSEMENT: Fichier .env non trouv√©, cr√©ation d'un fichier .env de base
                        echo APP_NAME=Laravel > .env
                        echo APP_ENV=local >> .env
                        echo APP_KEY= >> .env
                        echo APP_DEBUG=true >> .env
                        echo APP_URL=http://localhost:8000 >> .env
                        echo DB_CONNECTION=mysql >> .env
                        echo DB_HOST=localhost >> .env
                        echo DB_PORT=3306 >> .env
                        echo DB_DATABASE=laravel_multitenant >> .env
                        echo DB_USERNAME=root >> .env
                        echo DB_PASSWORD=rootpassword >> .env
                        echo Fichier .env cr√©√© avec succ√®s
                    ) else (
                        echo Fichier .env trouv√©
                    )
                    
                    echo Construction de l'image Docker...
                    docker build -t %DOCKER_IMAGE% .
                    if errorlevel 1 (
                        echo ERREUR: √âchec de la construction Docker
                        exit /b 1
                    )
                    echo === Image Docker construite ===
                '''
            }
        }

        stage('Debug Container') {
            steps {
                bat '''
                    echo === Debug du conteneur Docker ===
                    echo V√©rification du contenu du conteneur...
                    docker run --rm %DOCKER_IMAGE% ls -la /var/www/server.php
                    echo.
                    echo V√©rification du r√©pertoire /var/www:
                    docker run --rm %DOCKER_IMAGE% ls -la /var/www/ | findstr server
                '''
            }
        }

         stage('Trivy Image Scan') {
            steps {
                bat '''
                    echo === Scan de s√©curit√© Trivy (image Docker) ===
                    "%TRIVY_PATH%" image %DOCKER_IMAGE% --timeout 120s > trivy-image-report.txt 2>&1
                    if exist trivy-image-report.txt (
                        echo Fichier trivy-image-report.txt cr√©√© avec succ√®s
                    ) else (
                        echo AVERTISSEMENT: Fichier trivy-image-report.txt non cr√©√©, cr√©ation d'un rapport vide
                        echo "Aucune vuln√©rabilit√© d√©tect√©e ou erreur lors du scan" > trivy-image-report.txt
                    )
                '''
            }
            post {
                always {
                    bat 'type trivy-image-report.txt'
                    script {
                        def trivyImageText = readFile('trivy-image-report.txt')
                        writeFile file: 'trivy-image-report.html', text: """
                            <html>
                            <head>
                                <meta charset='UTF-8'>
                                <style>
                                    body { background: #222; color: #eee; }
                                    pre { font-family: monospace; font-size: 13px; }
                                </style>
                            </head>
                            <body>
                                <pre>
${trivyImageText}
                                </pre>
                            </body>
                            </html>
                        """
                    }
                    publishHTML(target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'trivy-image-report.html',
                        reportName: 'Trivy Docker Image Security Scan'
                    ])
                }
            }
        }

        stage('Deploy') {
            steps {
                // Arr√™ter et nettoyer les anciens conteneurs
                bat 'docker-compose down'
                bat 'docker container prune -f'

                // D√©marrer les services
                bat 'docker-compose up -d'

                // Attendre que les services soient pr√™ts
                bat 'powershell -Command "Start-Sleep -Seconds 30"'
                bat 'docker-compose ps'
                bat 'docker-compose logs app'

                // Attendre que le conteneur app soit pr√™t
                script {
                    def maxWaitTime = 60
                    def waitTime = 0
                    def containerReady = false

                    while (waitTime < maxWaitTime && !containerReady) {
                        try {
                            echo "=== Container logs ==="
                            bat 'docker-compose logs app'
                            echo "====================="
                            def status = bat(script: 'docker-compose ps app', returnStdout: true).trim()
                            echo "Container status: ${status}"
                            if (status.contains('Up')) {
                                try {
                                    bat 'docker-compose exec -T app echo "Container is responding"'
                                    containerReady = true
                                    echo "‚úÖ Container is ready after ${waitTime} seconds"
                                } catch (Exception e) {
                                    echo "‚è≥ Container is Up but not responding yet, waiting..."
                                    bat 'powershell -Command "Start-Sleep -Seconds 5"'
                                    waitTime += 5
                                }
                            } else {
                                echo "‚è≥ Container not ready yet, waiting..."
                                bat 'powershell -Command "Start-Sleep -Seconds 5"'
                                waitTime += 5
                            }
                        } catch (Exception e) {
                            echo "‚è≥ Container not responding yet, waiting..."
                            bat 'powershell -Command "Start-Sleep -Seconds 5"'
                            waitTime += 5
                        }
                    }
                    if (!containerReady) {
                        echo "‚ùå Container failed to become ready after ${maxWaitTime} seconds"
                        echo "=== Final container status ==="
                        bat 'docker-compose ps'
                        echo "=== Final container logs ==="
                        bat 'docker-compose logs app'
                        echo "============================"
                        error "‚ùå Container failed to become ready after ${maxWaitTime} seconds"
                    }
                }

                // Migrations avec retry
                script {
                    def maxRetries = 3
                    def retryCount = 0
                    def migrationSuccess = false
                    while (retryCount < maxRetries && !migrationSuccess) {
                        try {
                            bat 'docker-compose exec -T app php artisan migrate --force'
                            migrationSuccess = true
                            echo "‚úÖ Migration completed successfully on attempt ${retryCount + 1}"
                        } catch (Exception e) {
                            retryCount++
                            echo "‚ùå Migration attempt ${retryCount} failed: ${e.getMessage()}"
                            if (retryCount < maxRetries) {
                                echo "‚è≥ Waiting 15 seconds before retry..."
                                bat 'powershell -Command "Start-Sleep -Seconds 15"'
                                bat 'docker-compose ps'
                            }
                        }
                    }
                    if (!migrationSuccess) {
                        error "‚ùå Migration failed after ${maxRetries} attempts"
                    }
                }

                // Seeders
                script {
                    try {
                        echo "üå± Running database seeders..."
                        bat 'docker-compose exec -T app php artisan db:seed --force'
                        echo "‚úÖ Database seeding completed successfully"
                    } catch (Exception e) {
                        echo "‚ùå Database seeding failed: ${e.getMessage()}"
                        echo "‚ö†Ô∏è Continuing deployment despite seeding failure"
                    }
                }

                // Statut final et logs
                bat 'docker-compose ps'
                bat 'docker-compose logs --tail=20'
            }
        }
    }

    post {
        always {
            bat '''
                echo === Nettoyage ===
                docker image prune -f
                docker container prune -f
            '''
        }
        
        success {
            emailext (
                subject: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Build completed successfully. See: ${env.BUILD_URL}",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        
        failure {
            emailext (
                subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Build failed. See: ${env.BUILD_URL}",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        
        cleanup {
            cleanWs()
        }
    }
}